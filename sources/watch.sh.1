.TH watch.sh 1 "March 1, 2017" Linux "User Manuals"
.\"
.\" NAME ----------------------------------------------------------------------
.\"
.SH NAME
watch.sh \- a shell wrapper for mpv/MPlayer to run videos easy via CLI.
.\"
.\" SYNOPSIS ------------------------------------------------------------------
.\"
.SH SYNOPSIS
.TP 4
.IP "Simplest form"
.B watch.sh
[\fIoptional arguments\fP] \fB-d\fP \fIbasepath  keyword\fP
.IP "To start watching cycle"
.br
.B watch.sh
[\fIoptional arguments\fP] \fB-c -d\fP \fIbasepath  keyword\fP
.IP "To resume watching cycle"
.br
.B watch.sh
[\fIoptional arguments\fP] \fB-[r|R]\fP  [\fIkeyword\fP]
.IP "Check for updates"
.br
.B watch.sh -u
.\"
.\" DESCRIPTION ---------------------------------------------------------------
.\"
.SH DESCRIPTION
\fIwatch.sh\fP is written to simplify access to video files and play videos easily. It allows playing single files, DVD/BD folders and folders with episodes of TV series. For the former and the latter ones it can also find external subtitles and tracks, applying heuristic algorithms to include files with names that may strongly differ from the names of corresponding video files, and that frees you from the job of picking appropriate subtitles manually.

This script can also help you deal with organization of taken screenshots, placing them right into the folder named after video and compressing them after you stop watching it.

For the folder with episodes \fIwatch.sh\fP can track your watching progress, allowing to run episodes one after another without creating a playlist, but remembering the episode number you quit watching today, so you could easily resume watching the folder later.

\[char46]\[char46]\[char46]and many other accompanying things that make life even lazier.
.\"
.\" LIST OF ARGUMENTS ---------------------------------------------------------
.\"
.SH LIST OF ARGUMENTS
.SS "Required arguments"
.TP
.B -d, --basedir, --basepath <\fIbasepath\fP>
Main folder to start search in.
.TP
.I keyword
.br
A string to search in file and folder names. It is meant to handle simple strings in 98.9% of cases, but it also should support BRE.
.br
An example of strings that can be passed as keyword:
.RS 10
-
.I hachirota
-- plain alphanumeric;
.br
-
.I 'abc|d ef'
-- a pattern which would find anything containing \fBabc\fP or \fBd ef\fP;
.br
-
.I 'khihihi.*| ahem | nah'
-- possible, but unnecessary;
.br
-
.I 'Gzh[f-z]+[0-9]{2} | oooh~'
-- theoretically possible <s>in the future.</s>
.RE
.TP
.B -c, --run-in-cycle
Starts watching cycle in a found folder.
.P
.B -r, --resume
.br
.B -R, --resume-from-previous
.br
.RS 7
Resumes watching cycle. When the \fIkeyword\fP is given (the keyword is an argument by itself), it resumes session started with the specified \fIkeyword\fP, and the last session otherwise. Sessions are stored in a journal which size is limited (see also \fBFILES\fP section and descriptions to \fB--no-journal\fP and \fB--journal-max-size\fP options).

.br
\fB-r\fP|\fB--resume\fP will play the next episode, if the last one was watched till the end, or the previous one, if watching was interrupted (player was closed before the end of file has been reached). \fB-R\fP|\fB--resume-previous\fP is to select one episode back from what usual \fB--resume\fP would take. It may be helpful in case if you accidentally rewind the episode till the end -- to avoid starting a new watching cycle to open that previous episode again.
.RE
.\"
.\" OPTIONAL ARGUMENTS --------------------------------------------------------
.\"
.SS "Optional arguments"
.P
.B -a, --match-all
.br
.B -n, --match-number
.br
.RS 7
When the script is looking for external subtitles and tracks, it always picks those matching the video file name, but depending on the mode the script running in, it may add some another. Thus, in the mode when it plays a sequence of \fIepisodes\fP, the search for external subtitles and tracks is also done for those having both \fIkeyword\fP and \fIepisode number\fP in their names. And when it plays a \fIsingle\fP file, it also searches for those matching \fIkeyword\fP. \fB--match-number\fP allows external files having only the \fIepisode number\fP to be included to the list of found subtitles, while \fB--match-all\fP in addition to that includes those having only the \fIkeyword\fP in their names.
.RE
.TP
.B --bashrc[=\fIpath to file\fP]
.br
Source ~/.bashrc or the file specified as an argument. This is to make aliases available for \fB--mplayer-command\fP.
.TP
.B -C, --no-color
Forbid colored output, if possible.
.TP
.B --compat <mplayer|mplayer2|mpv-03x>
Set compatibility mode for keys passing to \fB--mplayer-command\fP. This affects DVD/BD playing, adding external subtitles and tracks, which is involving building options for the player command.
.br
The script is written to conform with the syntax of the latest \fBmpv\fP build (i.e. from git), so there's no need in compatibility modes if you use the upstream.
Use "mplayer" for the original MPlayer, "mplayer2" for mplayer2 and mpv-03x for mpv-0.3.x or older.
.TP
.B -e
Enable heuristic methods for finding episode numbers in file names. Specifying this option increases the default \fIheuristics level\fP, which initially equals to 0. This option is cumulative and since the highest \fIheuristics level\fP is 2, \fB-ee\fP is enough to bump it to the maximum.
Usually, there's no need to enable heuristics at all, if the files named properly and those names not differ much.
.RS 10
.B \-e
is useful when there are two or more kinds of names;
.br
.B \-ee
is only needed, if the sequence is comprised of several files which names highly differ. What was former 2nd level now is included in 1st, and the current second level is under development now.
.RS -3
See \fBUsing heuristics\fP subsection for details.
.RE
.RE
.TP
.B -f
Stands for "fixed string", tells \fIwatch.sh\fP to treat the \fIkeyword\fP as a literal. Don't count on this switch much, it affects the code in merely two places, and fixed strings won't be possible in the future, because there are unavoidable expressions where the \fIkeyword\fP is used in patterns, so if this switch will develop, it would be escaping, not a real fixed string.
.TP
.B --group-indicator <\fIchars\fP>
If for some reason, the terminal can't display ASCII graphic characters and the bullet, you can specify another set via this option. \fIchars\fP must be a string of exactly four characters, the first for the beginning of a group, the second for middle elements of the group, the third for the ending and the fourth for lone ones.
.TP
.B --heuristics-level <0..2>
Sets heuristics level directly to a specified number. The second level is under development and is currently disabled.
.TP
.B -H <\fIpattern\fP>
Calls \fBman watch.sh\fP with 'pager' option, specifying \fBless\fP as the pager and passing \fIpattern\fP to it, allowing to open this man page on a specified word, e.g. passing \fB-H '^EXAM'\fP will open  this man page on \fBEXAMPLES OF USE\fP section.
.TP
.B -h, --help
Shows this man page.
.TP
.B -I, --ignore-disks
Treat a folder containing DVD of BD stuff like a folder with episodes instead of playing it like an actual DVD or BD (See also \fBPlaying DVD and BD\fP subsection).
.TP
.B --interval <\fB0..9999999\fP>
Interval between playing episodes, in seconds. It is always set to 0 if mpv must play DVD or BD contents as episodes. The default is 3 seconds.
.TP
.B --ionice-opts [\fIoption list\fP]
Run mpv with ionice command. This is intended to give mpv higher I/O priority, when several tasks use the same drive. If \foption list\fP is omitted, watch.sh assumes "-c best-effort -n0" - the best we can give without root access.
.TP
.B -J, --no-journal
Do not use \fIjournal\fP to store session data. Resuming the cycle won't work, but you can gain a bit of privacy instead.
.TP
.B --journal-max-size <\fIvalue\fP>
The maximum size the \fIjournal\fP will be truncated to, in bytes. Additional suffixes K, M and G are recognized in the \fIvalue\fP to represent KiB, MiB and GiB, e.g. "1025" is 1025 bytes, "1K" is one kibibyte (1*1024 = 2^10 bytes). The default size is 64K.
.TP
.B --jpeg-compression[=0..100]
Use conversion to JPEG after running \fBpngcrush\fP (if present) on screenshots taken after closing watch session. The optional parameter defines quality, the default is 92. Use this only if you have MPlayer, mpv can save screenshots to JPEG itself, see \fBman mpv\fP to know how to set up its configuration file.
.TP
.B -L, --limit-watching-to <0..9999>
Long-awaited option to limit the nnumber of episodes that would be played in a sequence. I.e. if you're watching something, say, from 26 episodes and only have time to watch three, pass \fB-L3\fP along with the \fB-c\fP, \fB-r\fP or \fB-R\fP option, and watch.sh will quit after playing the episode that stands after 3 positions in the list (so one can safely do \fB-R\fP between episodes), e.g. if the watching has started on 14th episode, watch.sh will quit when 16th ends.
.TP
.B -l, --loop
Loop the watching cycle.
.TP
.B --last-ep
When watching goes in a \fIcycle\fP, prints the last shown episode number in big ASCII-art numbers, so it would be easier to remember. It sets three internal variables to default values:
.RS 10
- \fBcommand\fP - command line calling the program to output in ASCII-art (consider installing \fBfiglet\fP or \fBtoilet\fP for this purpose), default value is "figlet -t -f clb6x10 -c" or "cat" if figlet is not installed yet;
.br
- \fBformat\fP is the string to print. By default consists of only "%n", which is substituted with the number of the last shown episode. "\\n" and some other backslash combinations are also recognized, since the output is passed through \fBecho -e\fP;
.br
- \fBshow-after\fP - defines the time when to output the number. It may be printed after the player stops (and before screenshots processing), after processing, or in both times (this is the default), in this case the number is printed the second time only if there were screenshots that required processing.
.RS -3
This option isn't necessary to show the last episode number, it only sets default values, which you can provide separately. The actual trigger is any correct value to \fBshow-after\fP (see below).
.RE
.RE
.P
.B --last-ep-command <\fIcommand\fP>
.br
.B --last-ep-format <\fIformat\fP>
.br
.B --last-ep-show-after <player|screenshots|both>
.br
.RS 7
These options are a replacement for \fB--last-ep\fP, for those who likes to customize. For \fIcommand\fP and \fIformat\fP description, see \fB--last-ep\fP.
.RE
.TP
.B -M, --mplayer-command <\fIcommand\fP>
The \fIcommand\fP to run the player. May be an executable or an \fIalias\fP. \fBmpv\fP is used by default.
.TP
.B -m, --mplayer-opts <\fIoptions\fP>
\fIoptions\fP are passed to the \fImplayer command\fP after found subtitles and tracks (if there are any).
.br
P.S. mpv's --profile options are cumulative, so one can easily pass --profile=$HOSTNAME and --profile=hdmi for example.
.TP
.B --last-item-mark <\fImark\fP>
When mpv finishes playing the last item, if printing the episode number is enabled, watch.sh can print also a mark, be it a dot "." or a word on the next line "\\nEND". This is to see if the cycle has actually ended in case there were a bunch of screenshots. The thing is, after the last number and \fBparallel\fP header are printed, there is a small pause before output from parallel starts, so you look at the screen for several seconds for nothing. Having a mark tells when the watch cycle is finished, so you can move on to something else while parallel works.
.TP
.B --my-increment <\fIchar\fP>
.RS 0
.B --my-decrement <\fIchar\fP>
.RS 7
For characters to increment and decrement the number in the menu, if you want a pair of keys to supplement arrow keys on the other edge of keyboard. \fIchar\fP may be specified like a letter (k), an octal number ($'\\000') or as an escape sequence ($'\\e[D'). If heuristics is enabled (i.e. its level >0), then TAB, "h" and "H" will be reserved for their mode changing functions.
.br
In bash you can print escape sequence of a character generated by a key with \fBC-v <key>\fP.
.RE
.TP
.B -N, --dvd-bd-nav
Pass navigation variant of the protocol when playing a disk, i.e. dvdnav:// and bdnav:// instead of dvd:// or bd://. bdnav:// is only supported by \fBmpv\fP.
.TP
.B --no-hints
Do not show hints built in the interface (for experienced users).
.TP
.B --not-epnumbers <\fIpattern\fP>
For files that don't fall in any sequence, it is harder to define, where the episode number may be, and whether it is actually present there. In general case any number found in the filename may be the episode number, but watch.sh has, however, an array of patterns which, if met, cut off these patterns and all the rest till the end of the filename. These patterns include strings like 720p, x264 etc. The full list is defined in the \fBNOT_EPNUMBERS\fP variable in watch.sh. Some of the strings are \fIpatterns\fP, so you can add elements which are \fIpatterns\fP, too (useful commits are appreciated). Pattern is a bash pattern with extended glob matching (see \fBPattern Matching\fP section in the bash manual page). One pattern per option call allowed.
.TP
.B --remember-sub-and-audio-delay
Should be self-explanatory. But, for this to work one must set up certain mpv keybinding. See the details under \fBRemembering subtitles and audio delay between episodes\fP subsection.
.TP
.B -s, --subfolders <\fIpattern list\fP>
Prospective subfolders that are likely expected between a folder found in \fIbasepath\fP and files matching the \fIkeyword\fP. Usually they are subfolders that divide seasons or spans of episodes and named like "0-100", so putting "season -" in the \fIpattern list\fP will order to perform recursive search into the folder found in \fIbasepath\fP appending directories that do not contain \fIkeyword\fP but do contain word "season" and/or dash "-" and look for video at the end of the new path.
\fB%keyword\fP in the pattern list will be substituted with actual \fIkeyword\fP passed via command line.
.TP
.B -S, --screenshot-dir <\fIscreens path\fP>
If set, makes the script look for a folder *inside* the \fIscreens path\fP containing \fIkeyword\fP in its name. The script will change directory to it, so all the taken screenshots would be put in there. It will also try to compress fresh screenshots of PNG format with \fBpngcrush\fP if it will be found. For subsequent conversion to JPEG see \fB--jpeg-compression\fP.
There’s no need to use this switch to make mpv use just ONE certain folder, that is not $PWD, for any screenshots you take. Instead, consider adding a \fBcd\fP command to the alias before calling \fBwatch.sh\fP. The player should use it for storing screenshots.
.TP
.B --screenshot-dir-skel <\fIdirlist\fP>
The argument is a list of comma separated directories to be created under the folder specified via \fB--screenshot-dir\fP, e.g. "art,misc".
.TP
.B -t, --taskset-opts <\fICPU list\fP>
Passes \fICPU list\fP to \fBtaskset\fP, \fICPU list\fP may be a number, a span or a list, e.g. "0", "1-3", "0,2-4,7". It's called "taskset-opts" but actually takes only CPU list, so "-c" is not needed. Name is for conformance with --ionice-opts.
.P
.B -u
.br
.B --check-for-update[=0..n]
.br
.RS 7
By default, watch.sh will check each 21 day if there is a new release and report the status. The check can be initiated by both \fB-u\fP and \fB--check-for-update\fP without arguments and watch.sh will exit after the check, if it was specified with \fB-u\fP. If the argument to the long option is a number and is greater than 1, then it defines the pause in days between checks. The value of 0 suppresses any kind of automatic checks and concomitant messages. Immediate check can still take effect.
.RE
.TP
.B -v, --version
Prints version and legal information.
.\"
.\" FILES ---------------------------------------------------------------------
.\"
.SH FILES
\fB~/.watch.sh/journal\fP - stores session data.
.\"
.\" EXAMPLES OF USE -----------------------------------------------------------
.\"
.SH EXAMPLES OF USE

First of all, everyone has a directory with video files,
.I /home/video/
for example. In there can be single files (movies) or folders containing episodes, Blu-ray or DVD stuff. This is what must be passed to the \fB-d\fP option, which stands for \fIbasedir\fP or \fIbasepath\fP. To find something in it, a \fIkeyword\fP must also be passed. In this simlpiest case the script would
search for single files as well as folders inside of the \fIbasepath\fP, which names contain the specified \fIkeyword\fP. For example, if command line would look like that
.nf
	$ watch.sh -d /home/video clash
.fi
then items in \fBbold\fP will be shown to choose one of them to continue:
.nf
	/home/video/\fBclash.mkv\fP                           # video file match
	/home/video/\fBthose ones clashing hardly\fP/01.mkv   # folder match
	                                      /02.mkv
	/home/video/clashing_sounds_10_hours.ogg        # not a video
	/home/videos/free clash.mp4                     # not in \fIbasepath\fP
.fi
If the chosen one was a folder, then search goes further in its contents. Here an additional option, \fB--subfolders\fP may have an effect - if there are folders under the chosen directory, their names will be appended to the resulting path to video files as long as they match any of the patterns in \fIpattern list\fP (see above). Let's assume the chosen directory was
.nf
	/home/video/\fBClashes in the morning\fP
.fi
which, in its turn, has the following structure
.nf
	./Season 1/01.mkv
	          /02.mkv
	          /...
	./Season 2/01.mkv
	          /...
.fi
then passing \fB-s 'season'\fP will perform recursive search in the current directory, appending inner folders containing 'season' (case-insensitive) in their names to path, so .mkv files could get to the list of episodes. See also description to the \fB--subfolders\fP option above.
.\" -----------------------------------------------------------------------SS--
.SS Using heuristics
Sometimes the file names in the destination folder do not have a common template, making the task to guess the correct order of the files harder for the script. To improve ordering results, there were introduced levels of applied heuristics. It's only two of them: 1 and 2. Zero means heuristics is disabled and ordering is performed by calling the \fBsort\fP utility. For the vast majority of cases that would be enough, also this is the fastest method.
.br
But this does not cover the rest of the cases, when the list would be built in the wrong order. And to deal with it, the first level of heuristics breaks up each file name from the list to patterns residing to the left and to the right of presumptive episode numbers, increments that number, and, if such file will be found in the list, it combines all the file names having numbers in that place in a group. The largest group will be at the top. Second level, in addition to the before mentioned, does check all numbers in groups as numbers (and not as symbolic strings), resorting matches inside groups again. This takes time and may lead to some delay on CPUs that are not that powerful (old Pentiums, Atoms, ARMs etc). But this helps to align the list of episodes in the most correct order, and, in combination with file name groups, in the most desired way (if there is a season and a number of OVAs in the folder, 12 openings, or episode numbers go like "1 2... 10 11" instead of "01 02... 10 11" which makes usual \fBsort\fP fail). It's not recommended to enable 2nd level on a default basis, like putting it in the alias, cause the higher is the level, the slower the script works. It is always available in one key reach.
.br

Heuristics can be changed in the runtime by pressing \fBh\fP and \fBH\fP keys to lower the level and to rise it, respectively. Setting the level with \fB-e\fP or \fB-ee\fP option on a default basis may enable to avoid manual switching. Here's the reference table of heuristic levels
.nf
.B "+-----+---------------------+----------------------------------------+"
\fB|\fPlevel\fB|\fPcommand needed to set\fB|\fP               description              \fB|\fP
.B "+-----+---------------------+----------------------------------------+"
\fB|\fP  0  \fB|\fP          -          \fB|\fP Heuristics disabled. Ordering is done  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP via `sort` utility. This is the fast-  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP est method.                            \fB|\fP
.B "+-----+---------------------+----------------------------------------+"
\fB|\fP  1  \fB|\fP -e                  \fB|\fP Each file name is split up to parts to \fB|\fP
\fB|\fP     \fB|\fP --heuristics-level 1\fB|\fP find numbers. Other parts combined in  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP patterns, which in their turn are com- \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP bined in groups, items in groups are   \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP sorted by numbers and the largest      \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP grroup is placed at the top. Allows    \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP to define episode number more precise- \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP ly. Works a bit slower.                \fB|\fP
.B "+-----+---------------------+----------------------------------------+"
\fB|\fP  2  \fB|\fP --heuristics-level 2\fB|\fP Above what is done on the 1st level,   \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP watch.sh will try to build the list    \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP of episodes, starting with complemen-  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP ting the first group. If it finds      \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP a gap in episode numbers, it will try  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP to find groups and single filenames,   \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP that would fit entirely, and do the    \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP corresponding rearrangements. After    \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP reaching the end of the group it will  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP seek for a group or a single filename  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP to continue the sequence of episode    \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP numbers it has found. For single files \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP it will check the numbers that are     \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP left after applying NOT_EPNUMBERS pat- \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP terns, and fill the gaps in the new    \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP group, and so forth.                   \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP Missing 1..n numbers for the 1st taken \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP group is also considered a gap.        \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP At current stage it is implemented     \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP at 97 %, the work reuired rewriting    \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP the heuristics almost entirely, and    \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP the fruits of this work are manual     \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP rearrangement and automated queue for  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP rearrangements with prediction abili-  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP ty that enables to perform many rear-  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP rangements on indices and do the actu- \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP al rearrangement on real data at once  \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP to the resulting state. I hope         \fB|\fP
\fB|\fP     \fB|\fP                     \fB|\fP I could finish it sometimes.           \fB|\fP
.B "+-----+---------------------+----------------------------------------+"
.fi
.\" -----------------------------------------------------------------------SS--
.SS Using manual rearrangement
As a part of rewriting heu algorithms, there was implemented the possibility for the use to rearrange the items in the list. The syntax is simple: \fIfirst_item\fP[-\fIlast_item\fP]>\fIdestination_line\fP, e.g. \fB5-8>12\fP, \fB4>10\fP, they may also be combined via \fB,\fP (comma) like \fB1-2>12,9-10>4\fP. Numbers must represent lines as they currently seen on the screen. \fB1-2>12,4-5>2\fP will place elements from lines 1 and 2 to 12th line, and what is now seen on the lines fourth to fifth will be placed at the 12th line, too. Humans wouldn't need to do that.

.br
Manual rearrangement is supposed to be an ultimate fix, that user does when the automatic arrangement can't be brought to a satisfying view, and hence no further automatic arrangements are possible. The effect of manual rearrangement is dropped when switching between heuristics levels (in case it was made by a mistake).
.\" -----------------------------------------------------------------------SS--
.SS Playing DVD and BD
There's no need to pass the protocol and device options to the player any more! No need to remember them. The script can define the contents of the disk itself, when it finds an appropriate folder, so, playing a DVD or Bluray Disk is as simple as playing a static file - just pass the \fIbasepath\fP and the \fIkeyword\fP.
.RS 7
.TP
Standard player command line
. B $ mpv dvd:// --dvd-device /home/video/An_old_film/disk_1/
.TP
Now
.nf
.B $ wa old_film
   ^------ an alias \fB"watch.sh -d /home/video -S disk"\fP.
.fi
.RE
That's it. To use dvdnav:// instead of dvd:// which would be the default for a DVD, there is a \fB--dvd-nav\fP option, or \fB-N\fP as a shorthand that is faster to type after the alias. If the player will have problems with disk viewing, it is possible to build the video files into a list of episodes, and it takes only addition of \fB-I\fP (or \fB--ignore-disks\fP) option to do it (think of it like adding VIDEO_TS and BDMV/STREAM to the list of prospective \fIsubfolders\fP).
.br

MPlayer and its forks use \fBprofiles\fP that are usually set in user's config file, and the script aligns with them at this and will add appropriating profile to the option list, e.g. for MPlayer and bluray disk it will add \fB-profile protocol.br\fP, and for mpv \fB--profile protocol.bd\fP. In case the option setting profile was already passed through \fB--mplayer-opts\fP, additional profile will be added and separated by comma. See the player's \fBman\fP page for the details.
.\" -----------------------------------------------------------------------SS--
.SS Remembering subtitles and audio delay between episodes
.br
For subtitles add the following lines to your ~/.mpv/input.conf

.br
.nf
.B z add sub-delay -0.1 ; write_watch_later_config
.B x add sub-delay +0.1 ; write_watch_later_config
.fi

.br
And for audio-delay

.br
.nf
.B Ctrl+- add audio-delay -0.100 ; write_watch_later_config
.B Ctrl++ add audio-delay 0.100 ; write_watch_later_config
.fi

.br
Of course, these are default keys, you may change them if you like (and you should, especially Ctrl++).
Now, when shifting subtitles delay you must see lines like

.br
.nf
.B   Saving state.
.B   * watch.sh: remembering sub-delay=-1.000000
.fi

.br
The first one is mpv's reaction to write_watch_later_config, and the second is watch.sh reporting found a delay value.
.br
Usually it is safe to bind write_watch_later_config along with the command, but if you encounter any bugs, you may try to rebind it to its own key

.br
.nf
.B n write_watch_later_config
.fi

.br
and press it once after shifting is done.

.br
.B WARNING
.br
To work properly, this feauture adds --write-filename-in-watch-later-config to mpv options, which can possibly leave a trace of file names that have been played, in ~/.mpv/watch_later/ directory.
.\" -----------------------------------------------------------------------SS--
.SS I have one folder where I store old videos, and the other where I download new ones...
.br
Each time when there is multiple choice for files/folders a corresponding menu will be shown.
.\" -----------------------------------------------------------------------SS--
.SS Setting an alias
Or course, it wouldn't be much easier than calling mpv/MPlayer directly from the command line, if there would be so much options one must write.
.br
Fortunately, the number of options that is supposed to be used on the everyday basis is around five. And all the rest shall be placed in an \fBalias\fP of your \fBshell\fP, which is probably \fBbash\fP. Think of \fBalias\fP as a variable which is substituted with its value once it is found at the beginning of the entered command line. They are commonly used for aggregation of a bunch of options for a command and put into \fB~/.bashrc\fP, which is exactly what we need.
For starters, this would be a good alias:
.br
.nf
\fBalias wa='watch.sh \\
          -d BASEPATH \\
          --mplayer-opts "--fs --save-position-on-quit" \\
          --heuristics-level 1 \\
          --last-ep \\
          --remember-sub-and-audio-delay \\
          --screenshot-dir WHERE_DO_YOU_STORE_SCREENSHOTS \\
          --subfolders "season %keyword disk disc cd part pt dvd"'\fP
.fi
And... That's all!
.\".RS 7
.\".TP

.br
.B "$ wa -c toradora"
.br
And the cycle is started.
.\".TP
.br
.B "$ wa -r"
.br
And it's resumed.

.br
If you have multiple different folders with videos, it may be convenient to remove BASEPATH from the \fBwa\fP alias, and create another ones using it and specifying particular path:
.br
.nf
.B alias wa-a="wa -d /home/video/anime"
.B alias wa-f="wa -d /home/video/films"
.B alias wa-s="wa -d /home/video/serials"
.fi
.br
Authors aliases including those for multimonitor setup should be available on that page:
.br
http://github.com/deterenkelt/dotfiles/blob/master/bashrc/home.sh
.\" -----------------------------------------------------------------------SS--
.SS Using a custom figlet font
Since recent version, figlet isn't shipped with \fIclb6x10\fP font, so one has to either use some default font like \fIbanner\fP, or install figlet font separately and passing the substitute command showing the last played episode number to watch.sh.
.br
Figlet provides a wide variety of fonts, just visit http://www.figlet.org/. Note, that the font database is actually much much bigger on their ftp: ftp://ftp.figlet.org/pub/figlet/fonts/. You can also find that collection on github https://github.com/cmatsuoka/figlet-fonts.
.br

Direct links to the clb6x10 font:
.br
ftp://ftp.figlet.org/pub/figlet/fonts/contributed/bdffonts/clb6x10.flf
.br
https://github.com/cmatsuoka/figlet-fonts/raw/master/bdffonts/clb6x10.flf
.br

You can place it to your ~/.fonts folder and give absolute path to it as a font parameter:
.br

.B watch.sh ... --last-ep --last-ep-command "figlet -t -f $HOME/.fonts/clb6x10 -c"
.br

Here \fB--last-ep\fP sets the default options and \fB--last-ep-command\fP overrides the default command, which uses the font that figlet should have out of the box ("banner"). NB that \fB--last-ep\fP goes first. The other way is to set all the options explicitly (see the description for these options above).
.\" -----------------------------------------------------------------------SS--
.SS Setting up bash completion module
Completion suggests \fIKEYWORD\fPs entered earlier, for \fB-r\fP, \fB-R\fP and their long counterparts \fB--resume\fP and \fB--resume-from-previous\fP. Completion is available for several other options as well.
.br
Bash completion module should work after you restart the shell after installing watch.sh from the package or via ebuild. If it doesn't, or you're using the script in some other way known only to you, read the following instructions.
.br
Every bash completion module consists of two parts: the function defining completion
.br

.B complete -F <\fIfuncname\fP> <\fIcommand1\fP> [\fIcommand2\fP, \fIcommand3\fP...]

.br
And the actual function performing it (<\fIfuncname\fP> in the example above). Both come with watch.sh bash completion module. For the completion to work, three conditions must be met:
.br
- \fBwatch.sh\fP should be in the PATH.
.br
- the completion module must be in /usr/share/bash-completion/completions to be auto-sourced properly (since bash-4.3) and enabled (in bash-4.3 they managed to avoid big penalty, and completions are enabled by default). Or sourced manually in ~/.bashrc, for example:
.br

.B source bash-completion.sh
.br

- the name of the script must be \fBwatch.sh\fP. NB: this is a requirement only to the script name, not to an alias, you can freely use \fBwa-a\fP as an alias to watch.sh and it will work (if the other two conditions are met, of course), or any other name for an alias. Just keep in mind, that if you rename the actual script you must redefine the completion:
.br

.B complete -F _watchsh <\fIyour-name-for-watch.sh\fP>
.br

This line may be placed somewhere in ~/.bashrc as well.
.\".RE
.\" -----------------------------------------------------------------------SS--
.SS B-but I don't like writing something in the terminal...
This is not for you then. Consider reinstalling Windows(tm) or something.
.\"
.\" BUGS ----------------------------------------------------------------------
.\"
.SH BUGS
Heuristics is good but not perfect. Some groups may show the same results, since check for duplicates isn't implemented yet.

.br
Ehehee... It seems I totally forgot to add support for the MyAnimeList. Again.

\fBReport bugs to\fP http://github.com/deterenkelt/watchsh/issues
(Fixes to this manpage in particular are appreciated).
.\"
.\" CAVEATS -------------------------------------------------------------------
.\"
.SH CAVEATS
When using this script with \fB--screenshot-dir\fP be sure to name new screenshot folders properly and give \fIkeywords\fP that are short, but distinct. The script prints currently used folders above the list in order for you to be able to check it, so please never disregard to cast a glance upon them.
.br

\fBMPlayer\fP/\fBmpv\fP may still load subtitles it has found on its own. To avoid that, add
.br
\fBsub-auto=no\fP to ~/.mpv/config, if you have mpv >=0.4;
.br
\fBautosub=no\fP to ~/.mpv/config, if you have mpv <=0.3.x;
.br
\fBnoautosub\fP to ~/.mplayer/config, if you have MPlayer for some reason.

To make the player remember position you quit the file on, use \fBsave-position-on-quit\fP option for \fBmpv\fP (see also binding to the "Q" key), that can also be added to the config file.

.\" -----------------------------------------------------------------------SS--
.SS Running watch.sh with convert_script.lua (that cuts webms)

It's strongly recommended to disable all terminal output for the instances of mpv that would do encoding to not confuse watch.sh which mpv sent the message about exit. The following section
.br

.B [encoding]
.br
.B terminal=no
.br

should be present in ~/.mpv/config
.\"
.\" SEE ALSO ------------------------------------------------------------------
.\"
.SH SEE ALSO
.BR mpv (1),
.BR mplayer (1),
.BR figlet (6),
.BR cjpeg (1),
.BR taskset (1),
.BR ionice (1).
.\"
.\"
.\" AUTHOR ---------------------------------------------------------------------
.\"
.SH AUTHOR
deterenkelt.
